---
  - include_vars: "{{ playbook_dir }}/config.yml"      
  - include_vars: "main.yml"

  - name: Define oam network
    community.libvirt.virt_net:
      name: "{{ network.oam.name }}"
      command: define
      xml: |
        <network>
          <name>{{ network.oam.name }}</name>      
          <bridge name='{{ network.oam.name }}' stp='on' delay='0' />   
        </network>
    
  - name: Start oam network
    community.libvirt.virt_net:
      name: "{{ network.oam.name }}"
      command: start
    
  - name: Create interfaces
    shell: |
      ip link set "{{ network.oam.external_interface }}" up
      ip link del "{{ network.oam.external_interface }}"."{{ network.oam.external_vlan }}"
      ip link add link "{{ network.oam.external_interface }}" "{{ network.oam.external_interface }}"."{{ network.oam.external_vlan }}" type vlan id "{{ network.oam.external_vlan }}"
      ip link set "{{ network.oam.external_interface }}"."{{ network.oam.external_vlan }}" master "{{ network.oam.name }}"
      ip link set "{{ network.oam.external_interface }}"."{{ network.oam.external_vlan }}" up      

  - name: Define external networks
    community.libvirt.virt_net:
      name: "{{ item.name }}"
      command: define
      xml: |
        <network>
          <name>{{ item.name }}</name>      
          <bridge name='{{ item.name }}' stp='on' delay='0' />   
        </network>
    with_items:
      "{{ network.external }}"
    
  - name: Start external networks
    community.libvirt.virt_net:
      name: "{{ item.name }}"
      command: start
    with_items:
      "{{ network.external }}"      
    
  - name: Create interfaces for other networks
    shell: |
      ip link set "{{ item.external_interface }}" up
      ip link del "{{ item.external_interface }}"."{{ item.external_vlan }}"
      ip link add link "{{ item.external_interface }}" "{{ item.external_interface }}"."{{ item.external_vlan }}" type vlan id "{{ item.external_vlan }}"
      ip link set "{{ item.external_interface }}"."{{ item.external_vlan }}" master "{{ item.name }}"
      ip link set "{{ item.external_interface }}"."{{ item.external_vlan }}" up
    with_items:
      "{{ network.external }}"     

  - name: Create workdir 
    file:
      path: "{{ hypervisor.workdir }}"
      state: directory
      mode: "0755"

  - include_vars: "{{ playbook_dir }}/config.yml"      
  - include_vars: "main.yml"  

  - name: Create disk file script
    template:
      src: create_disk.j2
      dest: "{{ hypervisor.workdir }}/create_disks.sh"
 

  - name: Create disks
    shell:
      "bash {{ hypervisor.workdir }}/create_disks.sh"
      
    with_items:
      - "{{ nodes }}"
         
  - name: Download image file
    get_url:
      url: "{{ iso_image.url }}"
      dest: "/tmp/{{ iso_image.filename}}"
      timeout: 72000
                
  - name: Create temp directory for custom iso
    file:
      path: "{{ hypervisor.workdir }}/{{ item.name }}-install"
      state: directory
      mode: '0755'
    with_items:
      - "{{ nodes }}"

  - name: Mount iso image
    shell: |
      umount /mnt 2>/dev/null               
      mount -o loop /tmp/{{ iso_image.filename }} /mnt/      
      shopt -s dotglob
    args:
      warn: false
  
  - name: Copy files from image to customized directory
    shell: cp -avRf /mnt/* {{ hypervisor.workdir }}/{{ item.name }}-install/
    args:
      warn: false
    with_items:
      - "{{ nodes }}"

  - name: Umount iso 
    command: umount /mnt/
    args:
      warn: false
      
  - name: Create kickstart file
    template:
      src: kickstart.j2
      dest: "{{ hypervisor.workdir }}/{{ item.name }}-install/ks.cfg"
    vars:
      oam_ip_address: "{{ item.oam_ip }}"      
      node: "{{ item }}"
      node_name: "{{ item.name }}"
    with_items:
      - "{{ nodes }}"

  - name: Customize auto vm install via shell part 2
    shell: |      
      sed -i 's/append\ initrd\=initrd.img/append initrd=initrd.img\ ks\=cdrom:\/ks.cfg/'  {{ hypervisor.workdir }}/{{ item.name }}-install/isolinux/isolinux.cfg
      sed -i '/menu default/d'  {{ hypervisor.workdir }}/{{ item.name }}-install/isolinux/isolinux.cfg
      sed -i '/menu label \^Install CentOS 7/a     menu default'  {{ hypervisor.workdir }}/{{ item.name }}-install/isolinux/isolinux.cfg
      sed -i 's/timeout 600/timeout 5/g' {{ hypervisor.workdir }}/{{ item.name }}-install/isolinux/isolinux.cfg
      cd {{ hypervisor.workdir }}/{{ item.name }}-install
      mkisofs -J -T -o ../{{ item.name }}-ks.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -R -m TRANS.TBL -graft-points -V "CentOS 7 x86_64" .
      cd {{ hypervisor.workdir }}
      isohybrid  {{ item.name }}-ks.iso      
    args:
      warn: false
    with_items:
      - "{{ nodes }}"

  - name: Modify iso privilegies
    file:
      path: "{{ hypervisor.workdir }}/{{ item.name }}-ks.iso"
      state: file
      mode: '0755'
    with_items:
      - "{{ nodes }}"


  - name: Delete temp package
    file:
      path: "{{ hypervisor.workdir }}/{{ item.name }}-install"
      state: absent
    with_items:
      - "{{ nodes }}"
   
  - name: Delete temp script
    file:
      path: "{{ hypervisor.workdir }}/create_disks.sh"
      state: absent

  - name: Delete image
    file:
      path: /tmp/{{ iso_image.filename }}
      state: absent

  - name: Define virtual machine with iso
    community.libvirt.virt:
      command: define
      xml: "{{ lookup('template', 'virt_with_iso.j2') }}"
    vars:
      vm_name: "{{ item.name }}"
      ram: "{{ item.ram }}"
      cpus: "{{ item.cpus }}"
      dire: "{{ hypervisor.workdir }}"
      disk: "{{ item.disk }}"
      vnc_port: "{{ item.vnc.port }}"
      vnc_ip: "{{ hypervisor.ip }}"
    with_items:
      - "{{ nodes }}"

      
  - name: Start vms
    community.libvirt.virt:
      state: running
      name: "{{ item.name }}"
    with_items:
      - "{{ nodes }}"

      
  - name: Wait for installation
    wait_for:
      host: "{{ item.oam_ip }}"
      port: 22
      timeout: 7200
    with_items:
      - "{{ nodes }}"

  - name: Destroy VMs 
    community.libvirt.virt:
      command: destroy
      name: "{{ item.name }}"
    ignore_errors: yes
    with_items:
      - "{{ nodes }}"


  - name: Undefine  vms 
    community.libvirt.virt:
      command: undefine
      name: "{{ item.name }}"
    ignore_errors: yes
    with_items:
      - "{{ nodes }}"

  - name: Delete custom images
    file:
      path: "{{ item.hypervisor.workdir }}/{{ item.name }}-ks.iso"
      state: absent
    with_items:
      - "{{ nodes }}"

  - name: Define virtual machine without iso
    community.libvirt.virt:
      command: define
      xml: "{{ lookup('template', 'virt.j2') }}"
    vars:
      vm_name: "{{ item.name }}"
      ram: "{{ item.ram }}"
      cpus: "{{ item.cpus }}"
      dire: "{{ hypervisor.workdir }}"
      disk: "{{ item.disk }}"
      vnc_port: "{{ item.vnc.port }}"
      vnc_ip: "{{ hypervisor.ip }}"
    with_items:
      - "{{ nodes }}"

  - name: Start nodes
    community.libvirt.virt:
      state: running
      name: "{{ item.name }}"
    with_items:
      - "{{ nodes }}"
          
  - name: Wait for nodes
    wait_for:
      host: "{{ item.oam_ip }}"
      port: 22
      timeout: 7200
    with_items:
      - "{{ nodes }}"

            
       

   